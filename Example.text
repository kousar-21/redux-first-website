Redux ‚Äî Beginner-friendly step-by-step (English + ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ) üöÄ

Great ‚Äî below I‚Äôll walk you through everything step-by-step, in English and Bangla, with real-life analogies, React + Redux Toolkit code examples, and tips. I‚Äôll keep it hands-on and simple.

(1) Quick mental model (real-life example)

English ‚Äî Bank analogy (simple):

Store = Bank vault (where money/state is kept).

Action = ‚ÄúDeposit $100‚Äù or ‚ÄúWithdraw $50‚Äù (an intent/event).

Reducer = Bank clerk who updates the balance when they see an action.

UI = Your banking app that shows the updated balance.

Flow: UI ‚Üí dispatch(Action) ‚Üí Reducer updates Store ‚Üí UI reads Store and re-renders.

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‚Äî ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

Store = ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶ó‡¶®‡ßç‡¶ß‡¶ø (‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ü‡¶õ‡ßá)‡•§

Action = ‚Äú‡ßß‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ‚Äù ‡¶¨‡¶æ ‚Äú‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡¶æ‡¶ì‡¶≤‡ßã‚Äù (‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶æ‡¶ú/‡¶á‡¶ö‡ßç‡¶õ‡¶æ)‡•§

Reducer = ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶Ø‡ßá action ‡¶¶‡ßá‡¶ñ‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡¶¶‡¶≤‡¶æ‡¶Ø‡¶º‡•§

UI = ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤/‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶Ø‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§

(2) What is Redux & why use it? (short)

English:
Redux is a predictable global state management library. Use it when many components need the same data, or you want predictable updates and easier debugging (e.g., large apps, complex state interactions).

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ:
Redux ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶æ central ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡•§ ‡¶Ø‡¶ñ‡¶® ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶è‡¶ï‡¶á ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶æ ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡ßá ‚Äî ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶ì ‡¶∏‡¶π‡¶ú ‡¶π‡¶Ø‡¶º‡•§

(3) Modern Redux: Redux Toolkit (RTK) ‚Äî short recommendation

English:
Use Redux Toolkit (RTK). It reduces boilerplate, includes configureStore, createSlice, createAsyncThunk, and sets sensible defaults (DevTools, middleware). Also use react-redux for React bindings.

Install

npm install @reduxjs/toolkit react-redux
# or
yarn add @reduxjs/toolkit react-redux


‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ:
‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá Redux Toolkit ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶á ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶∏‡¶π‡¶ú ‚Äî ‡¶ï‡¶Æ ‡¶ï‡ßã‡¶°, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡•§ React-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø react-redux ‡¶≤‡¶æ‡¶ó‡ßá‡•§

(4) Core concepts (very short)

English

Store: single source of truth (object tree).

Action: plain JS object with type (and optional payload).

Reducer: pure function (state, action) => newState. Use slices in RTK.

Dispatch: send an action to the store.

Selector: function to read state (e.g., state => state.counter.value).

Middleware: intercept actions (thunks, logs).

Immutable updates: reducers return new state (RTK uses Immer so you can write "mutating" code).

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ

Store: ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶è‡¶ï ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡•§

Action: { type: "SOMETHING", payload: ... } ‚Äî ‡¶ï‡¶ø ‡¶ò‡¶ü‡¶õ‡ßá‡•§

Reducer: ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶¶‡¶≤‡¶æ‡¶¨‡ßá ‡¶§‡¶æ ‡¶¨‡¶≤‡ßá‡•§

Dispatch: action ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡•§

Selector: ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶™‡ßú‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡•§

Middleware: action-‡¶è‡¶∞ ‡¶Ü‡¶ó‡ßá/‡¶™‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá (e.g., async)‡•§

Immutable: ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã state ‡¶¨‡¶¶‡¶≤‡¶æ‡ßü ‡¶®‡¶æ; ‡¶®‡¶§‡ßÅ‡¶® state ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü (RTK ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶π‡¶ú ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü)‡•§

(5) Hands-on: Small Counter app with Redux Toolkit (step-by-step)
File structure (suggested)
src/
  app/
    store.js
  features/
    counter/
      counterSlice.js
      Counter.jsx
  index.js
  App.jsx

(1) src/app/store.js
// src/app/store.js
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from '../features/counter/counterSlice';

export const store = configureStore({
  reducer: {
    counter: counterReducer,
  },
});


What this does (EN): creates the Redux store and registers the counter slice reducer.
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ì counter reducer ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

(2) src/features/counter/counterSlice.js
// src/features/counter/counterSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = { value: 0 };

const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment(state) { state.value += 1; },           // immer allows "mutating" syntax
    decrement(state) { state.value -= 1; },
    incrementByAmount(state, action) { state.value += action.payload; }
  }
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;


EN: createSlice generates action creators and reducer automatically. Immer makes the state.value += 1 safe.
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: createSlice ‡¶•‡ßá‡¶ï‡ßá action ‡¶ì reducer ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‚Äî ‡¶ï‡ßã‡¶° ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ ‡¶≤‡¶æ‡¶ó‡ßá‡•§

(3) src/index.js (connect store to React)
// src/index.js (React 18)
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { store } from './app/store';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);


EN: Provider makes the Redux store available to all components.
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: Provider ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡ßü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

(4) src/features/counter/Counter.jsx
// src/features/counter/Counter.jsx
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from './counterSlice';

export default function Counter() {
  const count = useSelector((state) => state.counter.value); // selector
  const dispatch = useDispatch();
  const [amount, setAmount] = useState(0);

  return (
    <div style={{ padding: 20 }}>
      <h2>Counter: {count}</h2>
      <button onClick={() => dispatch(decrement())}>-</button>
      <button onClick={() => dispatch(increment())}>+</button>

      <div style={{ marginTop: 10 }}>
        <input
          type="number"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          placeholder="amount"
        />
        <button onClick={() => dispatch(incrementByAmount(Number(amount) || 0))}>
          Add Amount
        </button>
      </div>
    </div>
  );
}


EN: useSelector reads state; useDispatch sends actions. Component automatically re-renders when state.counter.value changes.
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: useSelector ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶™‡¶°‡¶º‡¶ø, useDispatch ‡¶¶‡¶ø‡ßü‡ßá action ‡¶™‡¶æ‡¶†‡¶æ‡¶á ‚Äî ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶¨‡¶¶‡¶≤‡¶æ‡¶≤‡ßá UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá‡•§

(6) Async data: createAsyncThunk example (fetching todos)

Why: network requests are asynchronous; we use thunks or createAsyncThunk to handle them properly with RTK.

src/features/todos/todosSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// async thunk: fetch todos
export const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=5');
  if (!res.ok) throw new Error('Network error');
  return await res.json(); // payload
});

const todosSlice = createSlice({
  name: 'todos',
  initialState: { items: [], status: 'idle', error: null },
  reducers: {
    addTodo(state, action) {
      state.items.push(action.payload);
    }
  },
  extraReducers(builder) {
    builder
      .addCase(fetchTodos.pending, (state) => { state.status = 'loading'; })
      .addCase(fetchTodos.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchTodos.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  }
});

export const { addTodo } = todosSlice.actions;
export default todosSlice.reducer;

Use in component
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchTodos } from './todosSlice';

export default function Todos() {
  const dispatch = useDispatch();
  const { items, status, error } = useSelector((state) => state.todos);

  useEffect(() => {
    if (status === 'idle') dispatch(fetchTodos());
  }, [status, dispatch]);

  if (status === 'loading') return <p>Loading...</p>;
  if (status === 'failed') return <p>Error: {error}</p>;

  return (
    <ul>
      {items.map(todo => <li key={todo.id}>{todo.title}</li>)}
    </ul>
  );
}


EN: createAsyncThunk handles pending/fulfilled/rejected lifecycles ‚Äî RTK makes it easy to manage loading states.
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: createAsyncThunk ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá async ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç/‡¶∏‡¶æ‡¶ï‡¶∏‡ßá‡¶∏/‡¶è‡¶∞‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∏‡¶π‡¶ú‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßá‡ßü‡•§

(7) How the flow really works (one-liner)

English: UI dispatches an action ‚Üí the store forwards it to reducers (and middleware) ‚Üí reducer returns new state ‚Üí store notifies subscribers ‚Üí UI reads state and updates.

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: UI action ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º ‚Üí store reducers/middleware-‡¶ï‡ßá ‡¶¶‡ßá‡¶Ø‡¶º ‚Üí reducer ‡¶®‡¶§‡ßÅ‡¶® state ‡¶¶‡ßá‡¶Ø‡¶º ‚Üí store ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶Ø‡¶º ‚Üí UI state ‡¶™‡¶°‡¶º‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§

(8) Best practices & tips (beginner-friendly)

Use RTK not plain Redux for most apps. (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: RTK ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®)

Keep slices focused (feature-based folders). (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞)

Use local state for transient UI (e.g., form inputs, modals) ‚Äî no need to put everything in Redux. (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶õ‡ßã‡¶ü UI state ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡ßá‡¶á ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®)

Use selectors to read state and memoize heavy selectors (reselect) if needed. (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: selector ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®)

For server data, consider RTK Query (built-in data fetching & caching) instead of rolling your own. (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø RTK Query ‡¶≠‡¶æ‡¶≤)

Learn DevTools (time travel, action log). (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: DevTools ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®)

(9) Debugging & DevTools

configureStore enables Redux DevTools by default in development. Open the browser Redux DevTools to inspect actions & state and time-travel.

Use console logging middleware during learning if you want to see actions. RTK provides good defaults already.

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶ï‡¶∞‡¶§‡ßá Redux DevTools ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‚Äî ‡¶ï‡ßÄ action ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, state ‡¶ï‡ßÄ ‡¶õ‡¶ø‡¶≤ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá‡¶®‡•§

(10) When NOT to use Redux

Tiny apps with simple local state ‚Äî Redux might be overkill.

When only 1‚Äì2 components need the state, keep it local.
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶õ‡ßã‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶¨‡¶æ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá state ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶≤‡¶æ‡¶ó‡ßá ‡¶®‡¶æ ‚Äî Redux ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶ì‡¶≠‡¶æ‡¶∞‡¶π‡ßá‡¶° ‡¶π‡¶¨‡ßá‡•§

(11) Common beginner mistakes

Mutating non-RTK reducers incorrectly ‚Äî RTK uses Immer so state.x = y is OK inside createSlice reducers, but do not mutate state outside reducers.

Doing side effects inside reducers ‚Äî reducers must be pure. Async or IO belongs in thunks or middleware.

Storing large derived data instead of computing it when needed.

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: reducer-‡¶è ‡¶∏‡¶æ‡¶á‡¶ü-‡¶è‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶¶‡¶ø‡¶á‡¶≤‡ßá ‡¶†‡¶ø‡¶ï ‡¶π‡¶¨‡ßá ‡¶®‡¶æ; async ‡¶ï‡¶æ‡¶ú ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á thunk/middleware-‡¶è ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®‡•§

(12) Quick cheat-sheet (commands & functions)

@reduxjs/toolkit ‚Üí configureStore, createSlice, createAsyncThunk

react-redux ‚Üí Provider, useSelector, useDispatch

Install: npm i @reduxjs/toolkit react-redux

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶Æ‡¶∞‡¶£‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® ‚Äî ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã RTK-‡¶§‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§‡•§

(13) Short recap (English + ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)

EN: Redux stores app state centrally. RTK makes writing Redux easy. Steps: install ‚Üí create slice ‚Üí configure store ‚Üí wrap app in Provider ‚Üí use useSelector & useDispatch in components. For async use createAsyncThunk or RTK Query.

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: Redux ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶ï‡ßá ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá‡•§ RTK ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶π‡¶ú ‡¶π‡ßü‡•§ ‡¶ß‡¶æ‡¶™‡¶ó‡ßÅ‡¶≤‡ßã: ‡¶á‡¶®‡ßç‡¶∏‡¶ü‡¶≤ ‚Üí slice ‡¶§‡ßà‡¶∞‡¶ø ‚Üí store ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‚Üí Provider ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶≤‡ßá‡¶™‡¶æ ‚Üí component-‡¶è useSelector/useDispatch ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡•§ Async-‡¶è createAsyncThunk ‡¶¨‡¶æ RTK Query ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§